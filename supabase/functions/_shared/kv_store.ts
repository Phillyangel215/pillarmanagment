/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

// This file provides a simple key-value interface for storing data in Supabase.
// Deno runtime, server-side only.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const getClient = () => createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!,
);

export const set = async (key: string, value: unknown): Promise<void> => {
  const supabase = getClient()
  const { error } = await supabase.from("kv_store_f2563d1b").upsert({ key, value });
  if (error) throw new Error(error.message);
};

export const get = async (key: string): Promise<unknown> => {
  const supabase = getClient()
  const { data, error } = await supabase.from("kv_store_f2563d1b").select("value").eq("key", key).maybeSingle();
  if (error) throw new Error(error.message);
  return data?.value;
};

export const getByPrefix = async (prefix: string): Promise<any[]> => {
  const supabase = getClient()
  const { data, error } = await supabase.from("kv_store_f2563d1b").select("key, value").like("key", prefix + "%");
  if (error) throw new Error(error.message);
  return data?.map((d) => d.value) ?? [];
};

